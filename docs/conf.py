"""Configuration file for Sphinx."""

# pylint: disable = invalid-name, empty-comment
#
# Spyder API docs documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  9 13:47:02 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.


# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# Standard library imports
import datetime

# Third party imports
# pylint: disable-next = import-error
from docutils import nodes

# pylint: disable-next = import-error
from docutils.parsers.rst import Directive, directives


# Constants
UTC_DATE = datetime.datetime.now(datetime.timezone.utc)


# -- General configuration ---------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = "1.0"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named "sphinx.ext.*") or your custom ones.
extensions = [
    "myst_parser",
    "sphinx.ext.autodoc",
    "sphinx.ext.githubpages",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = []  # "_templates"

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = {
    ".rst": "restructuredtext",
    ".md": "markdown",
}

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "Spyder Developer Docs"
author = "Spyder-API-Docs Contributors"
copyright = (  # pylint: disable = redefined-builtin
    f" 2020-{UTC_DATE.year} {author}; MIT License"
)

# The version info for the project you"re documenting, acts as replacement
# for |version| and |release|, also used in various other places throughout
# the built documents.
#
# The short X.Y version.
version = "6"
# The full version, including alpha/beta/rc tags.
release = "6"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# Intersphinx configuration
intersphinx_mapping = {
    "spyder": ("https://docs.spyder-ide.org/current/", None),
}

# -- Options for HTML output -------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_book_theme"

# Theme options are theme-specific and customize the look and feel of a
# theme further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    "repository_url": "https://github.com/spyder-ide/spyder-api-docs",
    "use_repository_button": True,
    "use_issues_button": True,
    "use_edit_page_button": True,
}
html_logo = "_static/images/spyder_logo.svg"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "_static/favicon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]


# -- Options for HTMLHelp output ---------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "spyder_api_doc"


# -- Options for LaTeX output ------------------------------------------

latex_elements = {
    # The paper size ("letterpaper" or "a4paper").
    #
    # "papersize": "letterpaper",
    #
    # The font size ("10pt", "11pt" or "12pt").
    #
    # "pointsize": "10pt",
    #
    # Additional stuff for the LaTeX preamble.
    #
    # "preamble": "",
    #
    # Latex figure (float) alignment
    #
    # "figure_align": "htbp",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass
# [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "spyder_api_docs.tex",
        project,
        author,
        "manual",
    ),
]


# -- Options for manual page output ------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        master_doc,
        "spyder_api_docs",
        project,
        [author],
        1,
    )
]


# -- Options for Texinfo output ----------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "spyder_api_docs",
        project,
        author,
        "spyder_api_docs",
        "The developer docs for the Spyder scientific Python IDE.",
        "Miscellaneous",
    ),
]

# source_parsers = {
#    ".md": "recommonmark.parser.CommonMarkParser",
# }


# -- Options for Linkcheck --------------------------------------------------

linkcheck_ignore = [
    # Virtual fragment ids
    r"https://(www\.)?github\.com/.+/compare/.+#diff-.+",
    # Flaky
    r"https://(www\.)?packages\.gentoo\.org/?.*",
    r"https://(www\.)?software\.opensuse\.org/?.*",
    r"https://(www\.)?packages\.ubuntu\.com/?.*",
    r"https://(www\.)?github\.com/.+/commit/.+",
    r"https://(www\.)?figshare\.com/?.*",
    # Blocks GitHub Actions
    r"https://(www\.)?(\w+\.)?reddit\.com/?.*",
    r"https://(www\.)?(\w+\.)?(stackoverflow|stackexchange)\.com/?.*",
]


# --- Myst parser options
# See: https://myst-parser.readthedocs.io/
myst_config = {}


# -- Additional Directives ---------------------------------------------------

# ReST directive for embedding Youtube and Vimeo videos.
# There are two directives added: ``youtube`` and ``vimeo``. The only
# argument is the video id of the video to include.
# Both directives have three optional arguments: ``height``, ``width``
# and ``align``. Default height is 281 and default width is 500.
# Example::
#     .. youtube:: anwy2MPT5RE
#         :height: 315
#         :width: 560
#         :align: left
# :copyright: (c) 2012 by Danilo Bargen.
# :license: BSD 3-clause


def align(argument):
    """Convert the "align" argument to one of the specified options."""
    return directives.choice(argument, ("left", "center", "right"))


class IFrameVideo(Directive):
    """A general directive for injecting an iframe video in a Sphinx doc."""

    has_content = False
    required_arguments = 1
    optional_arguments = 0
    final_argument_whitespace = False
    option_spec = {
        "height": directives.nonnegative_int,
        "width": directives.nonnegative_int,
        "align": align,
        "start": directives.nonnegative_int,
    }
    default_width = 500
    default_height = 281
    default_start = 0

    def run(self):
        """Execute the iframe video directive."""
        self.options["video_id"] = directives.uri(self.arguments[0])
        if not self.options.get("width"):
            self.options["width"] = self.default_width
        if not self.options.get("height"):
            self.options["height"] = self.default_height
        if not self.options.get("align"):
            self.options["align"] = "left"
        if not self.options.get("start"):
            self.options["start"] = self.default_start
        return [nodes.raw("", self.html % self.options, format="html")]


class Youtube(IFrameVideo):
    """A specific directive for injecting a Youtube video in a Sphinx doc."""

    html = "".join(
        [
            '<div class="video-container-container">',
            '<div class="video-container">',
            '<iframe src="https://www.youtube.com/embed/%(video_id)s',
            '?start=%(start)s" ',
            'width="%(width)u" height="%(height)u" frameborder="0" ',
            # pylint: disable = inconsistent-quotes
            "webkitAllowFullScreen mozallowfullscreen allowfullscreen ",
            'class="align-%(align)s"></iframe></div></div>',
        ]
    )


def setup(builder):  # pylint: disable = unused-argument
    """Register directives with Sphinx."""
    directives.register_directive("youtube", Youtube)
